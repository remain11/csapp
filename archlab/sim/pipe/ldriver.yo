                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx
0x03c: 716c01000000000000   | 	jle Stage1
0x045:                      | Loop2:	
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x059: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x063: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x06d: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x077: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x081: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x08b: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x095: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x09f: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0a9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b3: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0bd: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	
0x0c7: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x0d1: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x0db: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x0e5:                      | Test1:	
0x0e5: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0e7: c6f00100000000000000 | 	caddg $1, %rax		# count++
0x0f1:                      | Test2:
0x0f1: 6299                 | 	andq %r9, %r9
0x0f3: c6f00100000000000000 | 	caddg $1, %rax
0x0fd:                      | Test3:
0x0fd: 62aa                 | 	andq %r10, %r10
0x0ff: c6f00100000000000000 | 	caddg $1, %rax
0x109:                      | Test4:
0x109: 62bb                 | 	andq %r11, %r11
0x10b: c6f00100000000000000 | 	caddg $1, %rax
0x115:                      | Test5:
0x115: 62cc                 | 	andq %r12, %r12
0x117: c6f00100000000000000 | 	caddg $1, %rax
0x121:                      | Test6:
0x121: 62dd                 | 	andq %r13, %r13
0x123: c6f00100000000000000 | 	caddg $1, %rax
0x12d:                      | Test7:
0x12d: 62ee                 | 	andq %r14, %r14
0x12f: c6f00100000000000000 | 	caddg $1, %rax
0x139:                      | Test8:
0x139: 6233                 | 	andq %rbx, %rbx
0x13b: c6f00100000000000000 | 	caddg $1, %rax
0x145:                      | Npos2:	
0x145: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x14f: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x159: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x163: 764500000000000000   | 	jg Loop2			# if so, goto Loop:
                            | 
0x16c:                      | Stage1:
0x16c: c0f20600000000000000 | 	iaddq $6, %rdx
0x176: 71e601000000000000   | 	jle Stage0		# if so, goto Stage2:
0x17f:                      | Loop1:	
0x17f: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x189: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x193: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x19d: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x1a7: 6288                 | 	andq %r8, %r8		# val <= 0?
0x1a9: c6f00100000000000000 | 	caddg $1, %rax		# count++
0x1b3:                      | Npos:	
0x1b3: 6299                 | 	andq %r9, %r9			
0x1b5: c6f00100000000000000 | 	caddg $1, %rax		
0x1bf:                      | Npos1:	
0x1bf: c0f71000000000000000 | 	iaddq $16, %rdi		
0x1c9: c0f61000000000000000 | 	iaddq $16, %rsi		
0x1d3: c0f2feffffffffffffff | 	iaddq $-2, %rdx		
0x1dd: 767f01000000000000   | 	jg Loop1			
                            | 
0x1e6:                      | Stage0:
0x1e6: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x1f0: c0f20100000000000000 | 	iaddq $1, %rdx
0x1fa: 711902000000000000   | 	jle Done
0x203: 6288                 | 	andq %r8, %r8
0x205: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x20f: c6f00100000000000000 | 	caddg $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x219:                      | Done:
0x219: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x21a:                      | End:
                            | #/* $end ncopy-ys */
0x21a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x220:                      | 	.align 8
0x220:                      | src:
0x220: ffffffffffffffff     | 	.quad -1
0x228: feffffffffffffff     | 	.quad -2
0x230: 0300000000000000     | 	.quad 3
0x238: 0400000000000000     | 	.quad 4
0x240: fbffffffffffffff     | 	.quad -5
0x248: 0600000000000000     | 	.quad 6
0x250: 0700000000000000     | 	.quad 7
0x258: f8ffffffffffffff     | 	.quad -8
0x260: f7ffffffffffffff     | 	.quad -9
0x268: f6ffffffffffffff     | 	.quad -10
0x270: 0b00000000000000     | 	.quad 11
0x278: 0c00000000000000     | 	.quad 12
0x280: 0d00000000000000     | 	.quad 13
0x288: 0e00000000000000     | 	.quad 14
0x290: f1ffffffffffffff     | 	.quad -15
0x298: f0ffffffffffffff     | 	.quad -16
0x2a0: 1100000000000000     | 	.quad 17
0x2a8: 1200000000000000     | 	.quad 18
0x2b0: 1300000000000000     | 	.quad 19
0x2b8: 1400000000000000     | 	.quad 20
0x2c0: 1500000000000000     | 	.quad 21
0x2c8: 1600000000000000     | 	.quad 22
0x2d0: 1700000000000000     | 	.quad 23
0x2d8: e8ffffffffffffff     | 	.quad -24
0x2e0: 1900000000000000     | 	.quad 25
0x2e8: 1a00000000000000     | 	.quad 26
0x2f0: 1b00000000000000     | 	.quad 27
0x2f8: 1c00000000000000     | 	.quad 28
0x300: e3ffffffffffffff     | 	.quad -29
0x308: e2ffffffffffffff     | 	.quad -30
0x310: e1ffffffffffffff     | 	.quad -31
0x318: 2000000000000000     | 	.quad 32
0x320: dfffffffffffffff     | 	.quad -33
0x328: deffffffffffffff     | 	.quad -34
0x330: ddffffffffffffff     | 	.quad -35
0x338: dcffffffffffffff     | 	.quad -36
0x340: 2500000000000000     | 	.quad 37
0x348: 2600000000000000     | 	.quad 38
0x350: 2700000000000000     | 	.quad 39
0x358: 2800000000000000     | 	.quad 40
0x360: 2900000000000000     | 	.quad 41
0x368: d6ffffffffffffff     | 	.quad -42
0x370: 2b00000000000000     | 	.quad 43
0x378: d4ffffffffffffff     | 	.quad -44
0x380: d3ffffffffffffff     | 	.quad -45
0x388: d2ffffffffffffff     | 	.quad -46
0x390: 2f00000000000000     | 	.quad 47
0x398: 3000000000000000     | 	.quad 48
0x3a0: 3100000000000000     | 	.quad 49
0x3a8: ceffffffffffffff     | 	.quad -50
0x3b0: 3300000000000000     | 	.quad 51
0x3b8: 3400000000000000     | 	.quad 52
0x3c0: cbffffffffffffff     | 	.quad -53
0x3c8: caffffffffffffff     | 	.quad -54
0x3d0: c9ffffffffffffff     | 	.quad -55
0x3d8: c8ffffffffffffff     | 	.quad -56
0x3e0: c7ffffffffffffff     | 	.quad -57
0x3e8: c6ffffffffffffff     | 	.quad -58
0x3f0: c5ffffffffffffff     | 	.quad -59
0x3f8: c4ffffffffffffff     | 	.quad -60
0x400: c3ffffffffffffff     | 	.quad -61
0x408: c2ffffffffffffff     | 	.quad -62
0x410: c1ffffffffffffff     | 	.quad -63
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620:                      | Postdest:
0x620: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x628:                      | .align 8
                            | # Run time stack
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
                            | 
0x6a8:                      | Stack:
