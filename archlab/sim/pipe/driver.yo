                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f61803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 808601000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | 
0x03b: c0f2fdffffffffffffff | 	iaddq $-3,%rdx		# len <= 0?
0x045: 711901000000000000   | 	jle Stage   	# if so, goto Done:
0x04e:                      | Loop2:	
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x062: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x06c: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x076: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x080: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x08a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x094: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	
0x09e:                      | Test1:	
0x09e: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0a0: 71b300000000000000   | 	jle Test2		# if so, goto Test:
0x0a9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b3:                      | Test2:
0x0b3: 6299                 | 	andq %r9, %r9
0x0b5: 71c800000000000000   | 	jle Test3
0x0be: c0f00100000000000000 | 	iaddq $1, %rax
0x0c8:                      | Test3:
0x0c8: 62aa                 | 	andq %r10, %r10
0x0ca: 71dd00000000000000   | 	jle Test4
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax
0x0dd:                      | Test4:
0x0dd: 62bb                 | 	andq %r11, %r11
0x0df: 71f200000000000000   | 	jle Npos2
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax
0x0f2:                      | Npos2:	
0x0f2: c0f72800000000000000 | 	iaddq $40, %rdi		# src++
0x0fc: c0f62800000000000000 | 	iaddq $40, %rsi		# dst++
0x106: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len--
0x110: 764e00000000000000   | 	jg Loop2			# if so, goto Loop:
                            | 
0x119:                      | Stage:
0x119: c0f20400000000000000 | 	iaddq $4,%rdx
0x123: 718501000000000000   | 	jle Done
0x12c:                      | Loop1:	
0x12c: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x136: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x140: 6288                 | 	andq %r8, %r8		# val <= 0?
0x142: 715501000000000000   | 	jle Npos1		# if so, goto Npos:
0x14b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x155:                      | Npos1:	
0x155: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x15f: 718501000000000000   | 	jle Done			# if so, goto Loop:
0x168: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x172: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x17c: 702c01000000000000   | 	jmp Loop1
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x185:                      | Done:
0x185: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x186:                      | End:
                            | #/* $end ncopy-ys */
0x186:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x186:                      | check:
                            | 	# Return value test
0x186: 30fa0100000000000000 | 	irmovq $1,%r10
0x190: 61a0                 | 	subq %r10,%rax
0x192: 73ae01000000000000   | 	je checkb
0x19b: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x1a5: 70ec02000000000000   | 	jmp cdone
0x1ae:                      | checkb:
                            | 	# Code length check
0x1ae: 30f08601000000000000 | 	irmovq EndFun,%rax
0x1b8: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x1c2: 6120                 | 	subq %rdx,%rax
0x1c4: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x1ce: 6102                 | 	subq %rax,%rdx
0x1d0: 75ec01000000000000   | 	jge checkm
0x1d9: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x1e3: 70ec02000000000000   | 	jmp cdone
0x1ec:                      | checkm:
0x1ec: 30f21803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x1f6: 30f3f002000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x200: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x20a: 6277                 | 	andq %rdi,%rdi
0x20c: 736a02000000000000   | 	je checkpre         # Skip check if count = 0
0x215:                      | mcloop:
0x215: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x21f: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x229: 6160                 | 	subq %rsi,%rax
0x22b: 734702000000000000   | 	je  mok
0x234: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x23e: 70ec02000000000000   | 	jmp cdone
0x247:                      | mok:
0x247: 30f00800000000000000 | 	irmovq $8,%rax
0x251: 6002                 | 	addq %rax,%rdx	  # dest ++
0x253: 6003                 | 	addq %rax,%rbx    # src++
0x255: 30f00100000000000000 | 	irmovq $1,%rax
0x25f: 6107                 | 	subq %rax,%rdi    # cnt--
0x261: 761502000000000000   | 	jg mcloop
0x26a:                      | checkpre:
                            | 	# Check for corruption
0x26a: 30f21003000000000000 | 	irmovq Predest,%rdx
0x274: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x27e: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x288: 6120                 | 	subq %rdx,%rax
0x28a: 73a602000000000000   | 	je checkpost
0x293: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x29d: 70ec02000000000000   | 	jmp cdone
0x2a6:                      | checkpost:
                            | 	# Check for corruption
0x2a6: 30f22803000000000000 | 	irmovq Postdest,%rdx
0x2b0: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x2ba: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x2c4: 6120                 | 	subq %rdx,%rax
0x2c6: 73e202000000000000   | 	je checkok
0x2cf: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x2d9: 70ec02000000000000   | 	jmp cdone
0x2e2:                      | checkok:
                            | 	# Successful checks
0x2e2: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x2ec:                      | cdone:
0x2ec: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2f0:                      | 	.align 8
0x2f0:                      | src:
0x2f0: ffffffffffffffff     | 	.quad -1
0x2f8: 0200000000000000     | 	.quad 2
0x300: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x310:                      | 	.align 16
0x310:                      | Predest:
0x310: fadebc0000000000     | 	.quad 0xbcdefa
0x318:                      | dest:
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328:                      | Postdest:
0x328: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x330:                      | .align 8
                            | # Run time stack
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
                            | 
0x3b0:                      | Stack:
