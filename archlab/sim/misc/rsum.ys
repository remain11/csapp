# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
list:
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	
    irmovq list,%rdi
	call rsum_list		# rsum_list(list)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:	
    xorq %rax,%rax	     # = 0  
    andq %rdi,%rdi       # Set CC
	je     exit          # Goto exit
    mrmovq (%rdi),%rsi   # Get *val
    mrmovq 8(%rdi),%rdi  # Get *next
    pushq %rsi           # Save %rsi
    call   rsum_list     # rsum_list(ls->next)
    popq %rsi
    addq %rsi,%rax       # sum
    ret 
exit:
    ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
