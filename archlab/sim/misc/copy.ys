# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:	
    irmovq src,%rdi     # src
    irmovq dest,%rsi    # dest
    irmovq $3,%rdx      # len
	call copy_block		# copy_block(*src, *dest, len)
	ret

# long copy_block(*src, *dest, len)

copy_block:	
	xorq %rax,%rax	     # sum = 0
    irmovq $8,%rcx       # 8
    irmovq $1,%r8        # 1
	jmp     test         # Goto test
loop:	
    mrmovq (%rdi),%r9    # Get *val
    addq %rcx,%rdi       # src + 8
    rmmovq %r9,(%rsi)    # *dest = val
    addq %rcx,%rsi       # dest + 8
    xorq %r9,%rax        # Xor val  
    subq %r8,%rdx        # len--
test:	
    andq %rdx,%rdx	     # Set CC
    jne    loop          # Stop when 0
	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
